# Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
# License: GNU General Public License v3. See license.txt

from __future__ import unicode_literals
import frappe
from frappe import _
from frappe.utils import flt, getdate
from datetime import datetime
from dateutil import relativedelta

def execute(filters=None):
	if not filters: filters = {}

	if not validate(filters):
		return [],[]

	columns = get_columns(filters)

	data = get_data(filters)

	return columns, data

def validate(filters):
	if (not filters.get("fromdate")):
		frappe.throw("From Date Cannot Be Empty")

	if (not filters.get("todate")):
		frappe.throw("To Date Cannot Be Empty")

	if (not filters.get("item_code")):
		return False

	if (not filters.get("company")):
		return False

	return True

def get_columns(filters):
	"""return columns based on filters"""

	columns = [
        {
            "fieldname":"item",
            "fieldtype":"Data",
            "label":"Item"
        },
        {
            "fieldname":"in_qty",
            "fieldtype":"Float",
            "label":"In Qty"
        },
        {
            "fieldname":"out_qty",
            "fieldtype":"Float",
            "label":"Out Qty"
        },
        {
            "fieldname":"balance_qty",
            "fieldtype":"Float",
            "label":"Balance Qty"
        }
	]

	return columns

def get_conditions(filters,with_to_date=False):
	conditions = ""

	if filters.get("to_date") and with_to_date:
		conditions += " and posting_date <= '%s'" % frappe.db.escape(filters["to_date"])

	if filters.get("item_code"):
		conditions += " and item_code = '%s'" % frappe.db.escape(filters.get("item_code"), percent=False)

	return conditions


def get_opening_balance(filters):
	query = """select item_code, warehouse, sum(actual_qty) as opening_balance, valuation_rate
		from `tabStock Ledger Entry` force index (posting_sort_index)
		where docstatus < 2 and posting_date < %(fromdate)s and company=%(company)s
        {condition} order by posting_date, posting_time, name""".format(**{
            "condition":get_conditions(filters)
        })

	return frappe.db.sql(query, {
		'company':filters.get("company",""),
		'fromdate':str(filters.get("fromdate",""))
		},as_dict=True)

def get_current_items(filters):
	query = """select item_code, warehouse, posting_date, actual_qty, valuation_rate,
			company, voucher_type, qty_after_transaction, stock_value_difference
		from `tabStock Ledger Entry` force index (posting_sort_index)
		where docstatus < 2 and company = %(company)s and posting_date>= %(fromdate)s
        {condition} order by posting_date, posting_time, name""".format(**{
            "condition":get_conditions(filters,with_to_date=True)
        })

	return frappe.db.sql(query, {
		'company':filters.get("company",""),
		'fromdate':str(filters.get("fromdate",""))
		}, as_dict=True)

def get_data(filters):
	data = []
	opening = get_opening_balance(filters)
	opening_balance = 0
	for o in opening:
		build_row = {}
		build_row["item"] = o.item_code
		build_row["balance_qty"] = o.opening_balance
		opening_balance = o.opening_balance
		data.append(build_row)

	if not opening_balance:
		opening_balance = 0

	items = get_current_items(filters)
	previous_balance_qty = 0
	month_from_date = datetime.strptime(filters.get("fromdate"),"%Y-%m-%d").date()
	month_to_date = datetime.strptime(filters.get("todate"),"%Y-%m-%d").date()
	month_diff = relativedelta.relativedelta(month_to_date,month_from_date).months
	index = 1
	month_dict = []
	for r in range(month_from_date.month, month_diff):
		build_row = {}
		build_row["in_qty"] = 0
		build_row["out_qty"] = 0
		for i in items:
			build_row["item"] = i.posting_date.strftime('%B')
			if i.posting_date.month==r:
				build_row["in_qty"] += i.actual_qty if i.actual_qty > 0 else 0
				build_row["out_qty"] += abs(i.actual_qty) if i.actual_qty < 0 else 0
		if index==1:
			build_row["balance_qty"] = opening_balance+build_row["in_qty"]-build_row["out_qty"]
		else:
			build_row["balance_qty"] = previous_balance_qty+build_row["in_qty"]-build_row["out_qty"]
		previous_balance_qty = build_row["balance_qty"]
		data.append(build_row)
		index = index + 1

	return data

def build_months(start_month, difference):
	months_dict = []
	for m in range(1, difference):
		if start_month == 1:
			m.append("January")
		if start_month == 2:
			m.append("February")
		if start_month == 1:
			m.append("March")
		if start_month == 1:
			m.append("April")
		if start_month == 1:
			m.append("May")
		if start_month == 1:
			m.append("June")
		if start_month == 1:
			m.append("July")
		if start_month == 1:
			m.append("August")		if start_month == 1:

			m.append("September")
			m.append("October")
			m.append("November")
			m.append("December")


