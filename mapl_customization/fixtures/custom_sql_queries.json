[
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-04-23 16:25:00.380654", 
  "name": "Current Stock", 
  "query": "select item.item_code, item.brand, ifnull((select qty_after_transaction from `tabStock Ledger Entry` det where docstatus=1 and item_code=item.item_code order by posting_date, posting_time desc limit 1),0) as Qty from `tabItem` item order by item.brand, item.item_code", 
  "query_name": "Current Stock"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-04-23 16:26:58.214877", 
  "name": "Current Warehouse-wise Stock", 
  "query": "select item.item_code, item.item_group, item.brand, det.warehouse, sum(det.actual_qty) from `tabStock Ledger Entry` det,`tabItem` item where det.docstatus=1 and det.item_code=item.item_code group by det.item_code, det.warehouse order by item.brand, item.item_group, item.item_code", 
  "query_name": "Current Warehouse-wise Stock"
 }, 
 {
  "description": "Gets current stock from `Stock Ledger Entry` and `Serial No` with Details of Each Serial No and Item", 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-04-23 16:28:50.180151", 
  "name": "Current Stock with Serial No Details", 
  "query": "select * from ((select ser.name, ser.item_code, ser.item_group, ser.brand, ser.description, ser.warehouse, 1 as qty,ser.purchase_rate as rate, item.taxes_template from `tabSerial No` ser,`tabItem` item where ser.warehouse is not null and item.item_code=ser.item_code) union all \n(select null, item.item_code, item.item_group, item.brand, item.description, led.warehouse, sum(led.actual_qty),(sum(led.stock_value_difference)/sum(led.actual_qty)), item.taxes_template from `tabStock Ledger Entry` led, `tabItem` item where item.item_code=led.item_code and has_serial_no = 0 and led.docstatus = 1 group by item.item_code, led.warehouse)) a order by brand, item_code", 
  "query_name": "Current Stock with Serial No Details"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-08-19 19:00:55.291683", 
  "name": "Entry Checks", 
  "query": "select * from (\n  (select sum(paid_amount) as `Payment Entry Sum` from `tabPayment Entry` where docstatus=1) pes,\n  (select sum(debit) as `GL Payment Sum` from `tabGL Entry` where voucher_type = 'Payment Entry') pe,\n  (select sum(grand_total) as `Sales Invoice Sum` from `tabSales Invoice` where docstatus=1) tsi,\n  (select sum(debit-credit) as `GL Sales Sum` from `tabGL Entry` where voucher_type = 'Sales Invoice' and party_type is not null) tsge,\n  (select sum(grand_total) as `Purchase Invoice Sum` from `tabPurchase Invoice` where docstatus=1) tpi,\n  (select sum(credit) as `GL Purchase Sum` from `tabGL Entry` where voucher_type = 'Purchase Invoice' and party_type is not null) tpge,\n  (select sum(stock_value_difference) as `GL Stock Sum` from `tabStock Ledger Entry` where voucher_type = 'Stock Entry') segl,\n  (select sum(value_difference) as `Stock Entry Sum` from `tabStock Entry` where docstatus=1) sesu,\n  (select sum(total_debit) as `Journal Entry Sum` from `tabJournal Entry` where docstatus=1) jesu,\n  (select sum(debit) as `GL Journal Sum` from `tabGL Entry` where voucher_type='Journal Entry') gljs\n  )", 
  "query_name": "Entry Checks"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-07-20 18:46:53.939879", 
  "name": "HSN Code Check - Sales Invoice", 
  "query": "select * from `tabSales Invoice Item` where gst_hsn_code is null and docstatus=1", 
  "query_name": "HSN Code Check - Sales Invoice"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-07-20 18:57:18.038298", 
  "name": "Negative Entry Check", 
  "query": "select parent, item_code, warehouse from `tabSales Invoice Item` where actual_qty&lt;= 0 and docstatus=1", 
  "query_name": "Negative Entry Check"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-08-08 14:08:18.193745", 
  "name": "GFK Sales Report", 
  "query": "select \n  details.brand,\n  details.item_code, \n  sum(qty) as qty, \n  avg(rate) as rate \nfrom \n  `tabSales Invoice Item` details, \n  `tabSales Invoice` inv \nwhere \n  inv.name=details.parent \n  and inv.docstatus = 1 \n  and inv.posting_date&gt;='2017-07-01' \n  and inv.posting_date&lt;='2017-07-31' \n  and (details.brand='LG' or details.brand='Samsung')\ngroup by item_code \norder by brand, item_code ", 
  "query_name": "GFK Sales Report"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-08-15 20:10:36.703268", 
  "name": "Stock Entry GL Check", 
  "query": "select asum,name,purpose from (select sum(stock_value_difference) as `asum`, voucher_no from `tabStock Ledger Entry` sle where voucher_type = 'Stock Entry' group by voucher_no) a, `tabStock Entry` b where a.voucher_no = b.name and b.docstatus=1 and a.asum &lt;&gt; b.value_difference", 
  "query_name": "Stock Entry GL Check"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-08-20 19:30:44.560955", 
  "name": "Exchange Details", 
  "query": "select\n  inv.posting_date,\n  inv.letter_head,\n  inv.name,\n  inv.customer_name,\n  det.exchange_details,\n  group_concat(det.item_code) as `items_bought`\nfrom\n  `tabSales Invoice` inv,\n  `tabSales Invoice Item` det\nwhere\n  det.parent = inv.name\n  and inv.docstatus = 1\n  and det.under_exchange = 1\ngroup by\n  det.parent\norder by \n  inv.letter_head,\n  inv.posting_date", 
  "query_name": "Exchange Details"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-08-20 20:10:21.236281", 
  "name": "SLE vs BIN Stock", 
  "query": "select * from (\nselect it.brand, it.item_group, it.item_code,\n(select sum(actual_qty) from `tabBin` where item_code=it.item_code) as bin_qty,\n(select sum(actual_qty) from `tabStock Ledger Entry` where item_code=it.item_code) as sle_qty\nfrom `tabItem` it group by it.item_code\n) a where bin_qty&lt;&gt;sle_qty", 
  "query_name": "SLE vs BIN Stock"
 }
]