[
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-09-28 18:53:31.956900", 
  "name": "Current Stock", 
  "query": "select \n  item.item_code, \n  item.brand, \n  sum(actual_qty) as Qty\nfrom \n  `tabItem` item, \n  `tabStock Ledger Entry` det \nwhere \n  item.item_code like '24lh454%' \n  and det.item_code=item.item_code \n  and det.docstatus=1 \n  and det.posting_date&lt;='2017-08-31' \ngroup by \n  item.item_code\norder by \n  item.brand, \n  item.item_code,\n  det.posting_date, \n  det.posting_time", 
  "query_name": "Current Stock"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-04-23 16:26:58.214877", 
  "name": "Current Warehouse-wise Stock", 
  "query": "select item.item_code, item.item_group, item.brand, det.warehouse, sum(det.actual_qty) from `tabStock Ledger Entry` det,`tabItem` item where det.docstatus=1 and det.item_code=item.item_code group by det.item_code, det.warehouse order by item.brand, item.item_group, item.item_code", 
  "query_name": "Current Warehouse-wise Stock"
 }, 
 {
  "description": "Gets current stock from `Stock Ledger Entry` and `Serial No` with Details of Each Serial No and Item", 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-04-23 16:28:50.180151", 
  "name": "Current Stock with Serial No Details", 
  "query": "select * from ((select ser.name, ser.item_code, ser.item_group, ser.brand, ser.description, ser.warehouse, 1 as qty,ser.purchase_rate as rate, item.taxes_template from `tabSerial No` ser,`tabItem` item where ser.warehouse is not null and item.item_code=ser.item_code) union all \n(select null, item.item_code, item.item_group, item.brand, item.description, led.warehouse, sum(led.actual_qty),(sum(led.stock_value_difference)/sum(led.actual_qty)), item.taxes_template from `tabStock Ledger Entry` led, `tabItem` item where item.item_code=led.item_code and has_serial_no = 0 and led.docstatus = 1 group by item.item_code, led.warehouse)) a order by brand, item_code", 
  "query_name": "Current Stock with Serial No Details"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-08-19 19:00:55.291683", 
  "name": "Entry Checks", 
  "query": "select * from (\n  (select sum(paid_amount) as `Payment Entry Sum` from `tabPayment Entry` where docstatus=1) pes,\n  (select sum(debit) as `GL Payment Sum` from `tabGL Entry` where voucher_type = 'Payment Entry') pe,\n  (select sum(grand_total) as `Sales Invoice Sum` from `tabSales Invoice` where docstatus=1) tsi,\n  (select sum(debit-credit) as `GL Sales Sum` from `tabGL Entry` where voucher_type = 'Sales Invoice' and party_type is not null) tsge,\n  (select sum(grand_total) as `Purchase Invoice Sum` from `tabPurchase Invoice` where docstatus=1) tpi,\n  (select sum(credit) as `GL Purchase Sum` from `tabGL Entry` where voucher_type = 'Purchase Invoice' and party_type is not null) tpge,\n  (select sum(stock_value_difference) as `GL Stock Sum` from `tabStock Ledger Entry` where voucher_type = 'Stock Entry') segl,\n  (select sum(value_difference) as `Stock Entry Sum` from `tabStock Entry` where docstatus=1) sesu,\n  (select sum(total_debit) as `Journal Entry Sum` from `tabJournal Entry` where docstatus=1) jesu,\n  (select sum(debit) as `GL Journal Sum` from `tabGL Entry` where voucher_type='Journal Entry') gljs\n  )", 
  "query_name": "Entry Checks"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-07-20 18:46:53.939879", 
  "name": "HSN Code Check - Sales Invoice", 
  "query": "select * from `tabSales Invoice Item` where gst_hsn_code is null and docstatus=1", 
  "query_name": "HSN Code Check - Sales Invoice"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-07-20 18:57:18.038298", 
  "name": "Negative Entry Check", 
  "query": "select parent, item_code, warehouse from `tabSales Invoice Item` where actual_qty&lt;= 0 and docstatus=1", 
  "query_name": "Negative Entry Check"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-08-08 14:08:18.193745", 
  "name": "GFK Sales Report", 
  "query": "select \n  details.brand,\n  details.item_code, \n  sum(qty) as qty, \n  avg(rate) as rate \nfrom \n  `tabSales Invoice Item` details, \n  `tabSales Invoice` inv \nwhere \n  inv.name=details.parent \n  and inv.docstatus = 1 \n  and inv.posting_date&gt;='2017-07-01' \n  and inv.posting_date&lt;='2017-07-31' \n  and (details.brand='LG' or details.brand='Samsung')\ngroup by item_code \norder by brand, item_code ", 
  "query_name": "GFK Sales Report"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-08-15 20:10:36.703268", 
  "name": "Stock Entry GL Check", 
  "query": "select asum,name,purpose from (select sum(stock_value_difference) as `asum`, voucher_no from `tabStock Ledger Entry` sle where voucher_type = 'Stock Entry' group by voucher_no) a, `tabStock Entry` b where a.voucher_no = b.name and b.docstatus=1 and a.asum &lt;&gt; b.value_difference", 
  "query_name": "Stock Entry GL Check"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-08-20 19:30:44.560955", 
  "name": "Exchange Details", 
  "query": "select\n  inv.posting_date,\n  inv.letter_head,\n  inv.name,\n  inv.customer_name,\n  det.exchange_details,\n  group_concat(det.item_code) as `items_bought`\nfrom\n  `tabSales Invoice` inv,\n  `tabSales Invoice Item` det\nwhere\n  det.parent = inv.name\n  and inv.docstatus = 1\n  and det.under_exchange = 1\ngroup by\n  det.parent\norder by \n  inv.letter_head,\n  inv.posting_date", 
  "query_name": "Exchange Details"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-08-20 20:10:21.236281", 
  "name": "SLE vs BIN Stock", 
  "query": "select * from (\nselect it.brand, it.item_group, it.item_code,\n(select sum(actual_qty) from `tabBin` where item_code=it.item_code) as bin_qty,\n(select sum(actual_qty) from `tabStock Ledger Entry` where item_code=it.item_code) as sle_qty\nfrom `tabItem` it group by it.item_code\n) a where bin_qty&lt;&gt;sle_qty", 
  "query_name": "SLE vs BIN Stock"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-08-28 19:21:18.929679", 
  "name": "Serial No Warehouse Check", 
  "query": "select \n  a.name,\n  a.warehouse,\n  s.warehouse,\n  s.item_code\nfrom \n  (select \n        sum(\n          ent.actual_qty /\n            (LENGTH(TRIM(TRAILING '\\n' FROM ent.serial_no)) - \n              LENGTH(REPLACE(TRIM(TRAILING '\\n' FROM ent.serial_no), '\\n', '')) + 1)) as qty,\n        ent.warehouse, \n        serial.name, \n        serial.item_code, \n        ent.voucher_no \n      from `tabStock Ledger Entry` ent, \n           `tabSerial No` serial \n      where \n        ent.serial_no like concat('%',serial.name,'%') \n        and ent.item_code=serial.item_code \n      group by \n        serial.name, warehouse) a, \n  `tabSerial No` s \nwhere \n  a.name=s.name \n  and a.qty&gt;=1\n  and a.warehouse&lt;&gt;s.warehouse", 
  "query_name": "Serial No Warehouse Check"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-08-29 18:22:54.326433", 
  "name": "Tax Check", 
  "query": "(select \n  inv.posting_date, \n  item.parent, \n  item.item_code, \n  inv.reference_details, \n  item.rate, \n  inv.grand_total \n from `tabSales Invoice Item` item, \n      `tabSales Invoice` inv, \n      `tabSales Taxes and Charges` tax \n where inv.name=item.parent \n  and inv.name=tax.parent \n  and tax.included_in_print_rate=1 \n  and item.net_rate=item.rate \n  and item.rate&gt;0 \n  and inv.docstatus=1 \n order by posting_date, parent) \n  union all\n(select \n  inv.posting_date, \n  inv.name, \n  null, \n  inv.reference_details, \n  inv.grand_total,  \n  inv.grand_total \n from `tabSales Invoice` inv \n where inv.docstatus = 1 \n  and inv.total_taxes_and_charges = 0\n  and inv.grand_total&gt;0)", 
  "query_name": "Tax Check"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-08-29 18:58:20.223414", 
  "name": "Sale Report", 
  "query": "select \n  inv.letter_head,\n  inv.name,\n  inv.posting_date,\n  inv.customer_name,\n  addr.address_line1,\n  addr.address_line2,\n  addr.city,\n  cust.primary_contact_no,\n  item.brand, \n  item.item_group,\n  item.item_code,\n  trim(trailing '\\n' FROM item.serial_no) as serial_no,\n  item.rate\nfrom `tabSales Invoice` inv,\n   `tabSales Invoice Item` item,\n   `tabCustomer` cust,\n   `tabAddress` addr\nwhere\n   inv.name=item.parent\n   and inv.docstatus=1\n   and inv.name=item.parent\n   and item.brand = 'LG'\n   and inv.customer=cust.name\n   and addr.address_title=cust.name \n   and addr.name=inv.customer_address \n   and inv.posting_date&gt;='2017-08-01'     \norder by inv.posting_date, inv.name", 
  "query_name": "Sale Report"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-08-30 16:26:30.265575", 
  "name": "Letter Head Check", 
  "query": "(select 'Payment Entry', name, party_name, letter_head from `tabPayment Entry` where (name like '%RH%' and docstatus=1 and letter_head not like '%Ranjeet%') or (name like '%GB%' and docstatus=1 and letter_head not like '%Geeta%') or (name like '%VN%' and docstatus=1 and letter_head not like '%Vijay N%'))\nunion all\n(select 'Sales Invoice', name, customer_name, letter_head from `tabSales Invoice` where (name like '%RH%' and docstatus=1 and letter_head not like '%Ranjeet%') or (name like '%GB%' and docstatus=1 and letter_head not like '%Geeta%') or (name like '%VN%' and docstatus=1 and letter_head not like '%Vijay N%'))", 
  "query_name": "Letter Head Check"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-10-07 20:55:24.808632", 
  "name": "Serial Nos for Price Drop", 
  "query": "select \n  serial.name,\n  serial.item_code,\n  serial.brand,\n  serial.delivery_date,\n  min(sle.posting_date) as purchase_date,\n  count(*)\nfrom \n  `tabSerial No` serial,\n  `tabStock Ledger Entry` sle\nwhere\n  sle.item_code=serial.item_code\n  and serial.item_code regexp ('49E400|43ES480|49ES480|49ES630|55ES500|49EX600|55EX600')\n  and sle.voucher_no not in (select name from `tabStock Entry` where purpose='Material Transfer')  \n  and serial.name regexp REPLACE(TRIM(TRAILING '\\n' FROM sle.serial_no), '\\n', '|')\n  and (serial.delivery_date is null or serial.delivery_date &gt;= '2017-10-01')\ngroup by\n  serial.name\norder by \n  item_code", 
  "query_name": "Serial Nos for Price Drop"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-12-06 16:21:01.857488", 
  "name": "Cash Sales Total", 
  "query": "select \n  posting_date,\n  sum(grand_total) as `Total`\nfrom\n  `tabSales Invoice`\nwhere\n  docstatus = 1\n  and posting_date&gt;='2017-12-05'\n  and posting_date&lt;='2017-12-05'\n  and customer_name like 'CASH S%'\n  and letter_head like 'Geeta %'\ngroup by posting_date\norder by posting_date", 
  "query_name": "Cash Sales Total"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-09-18 16:06:30.234163", 
  "name": "Tax Vs State Query", 
  "query": "select \n  inv.customer,\n  inv.customer_name,\n  addr.state,\n  addr.gst_state,\n  inv.taxes_and_charges\nfrom\n  `tabSales Invoice` inv,\n  `tabCustomer` cust,\n  `tabAddress` addr \nwhere\n  cust.name=inv.customer\n  and inv.docstatus = 1\n  and inv.posting_date &gt;= '2017-08-01'\n  and inv.posting_date &lt;= '2017-08-31'\n  and addr.address_title=cust.name\norder by\n  inv.posting_date", 
  "query_name": "Tax Vs State Query"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-10-30 15:30:57.495136", 
  "name": "Samsung Sales for Uploading", 
  "query": "select\n  item.item_code,\n  item.brand,\n  item.item_group,\n  concat('\"',serial.name,'\"') as serial_no,\n  sales.customer_name,\n  sales.posting_date,\n  sales.address_display,\n  cust.primary_contact_no,\n  details.rate\nfrom\n  `tabSerial No` serial,\n  `tabItem` item,\n  `tabSales Invoice` sales,\n  `tabSales Invoice Item` details,\n  `tabCustomer` cust\n where\n  item.item_code=serial.item_code\n  and sales.name=serial.sales_invoice\n  and sales.docstatus=1\n  and cust.name=sales.customer\n  and sales.posting_date&gt;='2017-09-01'\n  and item.brand='Samsung'\n  and details.parent=sales.name\norder by\n  item.item_code, \n  serial.name, \n  sales.posting_date, \n  sales.customer_name", 
  "query_name": "Samsung Sales for Uploading"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2017-11-17 20:14:30.020750", 
  "name": "Warehouse Mismatch Issue", 
  "query": "select * from (select \n  concat('\"',serial.name,'\"') as serial_no, \n  serial.item_code, \n  serial.warehouse, \n  (select \n    sle.warehouse\n  from \n    `tabStock Ledger Entry` sle\n  where\n    sle.item_code=serial.item_code\n    and sle.serial_no like concat('%',serial.name,'%')\n    and actual_qty&gt;0\n  order by posting_date desc,creation desc limit 1) as was_in_warehouse,\n  (select \n    sle.warehouse\n  from\n   `tabStock Ledger Entry` sle\n  where\n    sle.item_code=serial.item_code\n    and sle.serial_no like concat('%',serial.name,'%')\n    and actual_qty &lt; 0\n    and voucher_type not like '%Stock En%'\n  order by posting_date desc,creation desc limit 1) as sold_from_warehouse\nfrom \n  `tabSerial No` serial) data\nwhere\n  sold_from_warehouse &lt;&gt; was_in_warehouse", 
  "query_name": "Warehouse Mismatch Issue"
 }, 
 {
  "description": "Lists Sales Invoices where Taxable Amount is 0 while it should have been not 0.", 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2018-03-19 18:31:28.850915", 
  "name": "Tax Amount vs Taxable Amount Mismatch", 
  "query": "select \n  item.parent, \n  item.item_code, \n  item.base_rate, \n  item.net_amount \nfrom \n  `tabSales Invoice Item` item,\n  `tabSales Invoice` inv \nwhere \n  inv.name=item.parent \n  and inv.docstatus=1 \n  and inv.posting_date&gt;='2018-02-01' \n  and inv.posting_date&lt;='2018-02-28' \n  and item.base_rate*item.qty=item.net_amount", 
  "query_name": "Tax Amount vs Taxable Amount Mismatch"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2021-04-14 13:30:38.532119", 
  "name": "GST Detailed Report", 
  "query": "//SALES\nselect *,\n cast((net_amount*tax_rate/100) as decimal(17,2)) as total_tax,\n if(flag,cast((net_amount*tax_rate/100) as decimal(17,2)),0) as IGST,\n if(flag,0,cast(((net_amount*tax_rate/100)/2) as decimal(17,2))) as SGST from (\n  select\n  item.parent,\n  sales.reporting_name,\n  sales.posting_date,  \n  sales.customer_name,\n  (select\n    b_addr.gstin\n   from\n    `tabAddress` b_addr\n   where\n    b_addr.address_title=cust.name\n    and b_addr.name=sales.customer_address\n  ) as billing_gstin,\n  sales.special_invoice,\n  addr.gstin,\n  addr.city,\n  addr.state,\n  addr.gst_state_number,\n  item.item_code,\n  item.description,\n  item.item_group,\n  item.gst_hsn_code,\n  item.item_tax_rate,\n  left(right(item.item_tax_rate,5),4) as tax_rate_1,   \n  mid(item.item_tax_rate,locate(':',item.item_tax_rate,locate('IGST',item.item_tax_rate))+1,5) as tax_rate,\n  sum(item.qty) as qty,\n  cast(avg(item.net_rate) as decimal(17,2)) as net_rate,   \n  cast(sum(item.net_amount) as decimal(17,2)) as net_amount,\n  \n  ((gst_state_number&lt;&gt;0 and gst_state_number&lt;&gt;23) or\n  ((gstin is not null and gstin&lt;&gt;'' and left(gstin,2)&lt;&gt;23) or\n  (state is not null and state not regexp ('MADHYA PRADESH|M.P.|M.P|MP')) and\n  (state is not null and state&lt;&gt;''))) as flag,\n   \n  (select sum(tax_amount) from `tabSales Taxes and Charges` where parent = sales.name and account_head regexp ('SGST|CGST|IGST')) as charged_taxes\n\nfrom\n  `tabSales Invoice Item` item,\n  `tabSales Invoice` sales,\n  `tabAddress` addr,\n  `tabCustomer` cust\nwhere\n  sales.docstatus=1\n  and sales.name=item.parent\n  and addr.address_title=cust.name\n  and sales.shipping_address_name=addr.name\n  and sales.posting_date&gt;='2021-03-01'\n  and sales.posting_date&lt;='2021-03-31'\ngroup by\n  item.gst_hsn_code,\n  item.parent,\n  tax_rate\norder by\n  sales.name,\n  sales.posting_date) a\n\n\n\n//PURCHASE\nselect *, \n cast((net_amount*tax_rate/100) as decimal(17,2)) as total_tax,\n if(flag,cast((net_amount*tax_rate/100) as decimal(17,2)),0) as IGST,\n if(flag,0,cast(((net_amount*tax_rate/100)/2) as decimal(17,2))) as SGST from (\n  select \n  item.parent, \n  purchase.reporting_name,\n  purchase.posting_date,  \n  purchase.bill_no,\n  purchase.bill_date,\n  purchase.supplier_name,\n  (select \n    b_addr.gstin \n   from \n    `tabAddress` b_addr \n   where \n    b_addr.address_title=supp.name \n    and b_addr.name=purchase.supplier_address\n  ) as billing_gstin,\n  addr.gstin,\n  addr.city,\n  addr.state,\n  addr.gst_state_number,\n  item.item_code, \n  item.description, \n  item.item_group, \n  item.gst_hsn_code,\n  item.item_tax_rate, \n  left(right(item.item_tax_rate,5),4) as tax_rate_1,   \n  mid(item.item_tax_rate,locate(':',item.item_tax_rate,locate('IGST',item.item_tax_rate))+1,5) as tax_rate, \n  sum(item.qty) as qty, \n  cast(avg(item.net_rate) as decimal(17,2)) as net_rate,   \n  cast(sum(item.net_amount) as decimal(17,2)) as net_amount,\n  \n  ((gst_state_number&lt;&gt;0 and gst_state_number&lt;&gt;23) or \n  ((gstin is not null and gstin&lt;&gt;'' and left(gstin,2)&lt;&gt;23) or\n  (state is not null and state not regexp ('MADHYA PRADESH|M.P.|M.P|MP')) and\n  (state is not null and state&lt;&gt;''))) as flag\n\nfrom \n  `tabPurchase Invoice Item` item,\n  `tabPurchase Invoice` purchase,\n  `tabAddress` addr,\n  `tabSupplier` supp\nwhere \n  purchase.docstatus=1\n  and purchase.name=item.parent\n  and addr.address_title=supp.name\n  and purchase.supplier_address=addr.name\n  and (purchase.bill_date between '2018-04-01' and '2019-03-31'\n       or purchase.posting_date between '2018-04-01' and '2019-03-31')\n  and purchase.name in (select parent from `tabPurchase Taxes and Charges` taxes where taxes.account_head in (select distinct tax_type from `tabItem Tax`))\ngroup by\n  item.gst_hsn_code,\n  item.parent,\n  tax_rate\norder by\n  purchase.name,\n  purchase.posting_date) a", 
  "query_name": "GST Detailed Report"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2018-07-18 14:04:03.731202", 
  "name": "Posting Date Problem", 
  "query": "select * from ((select distinct\n  'Payment Entry' as `Document Type`,\n  error_pe.letter_head,\n  main_pe.name, \n  main_pe.posting_date\nfrom \n  `tabPayment Entry` main_pe,\n  (select \n    letter_head,\n    max(pe.name) as name, \n    pe.posting_date \n  from   \n    `tabPayment Entry` pe \n  where   \n    pe.name &lt; (select \n        max(name) \n       from \n         `tabPayment Entry` \n       where \n          posting_date = (pe.posting_date - interval 1 day) \n        and letter_head = pe.letter_head\n        and posting_date &lt; '2018-08-01' \n        and posting_date &gt; '2018-03-31'\n        and docstatus=1) \n    and posting_date &lt; '2018-08-01' \n    and posting_date &gt; '2018-03-31'  \n    and docstatus=1 \n  group by \n    pe.posting_date \n  order by\n    pe.posting_date) error_pe\nwhere \n  main_pe.posting_date &gt;= (error_pe.posting_date - interval 1 day) \n  and main_pe.posting_date &lt;= (error_pe.posting_date + interval 1 day)\n  and main_pe.letter_head = error_pe.letter_head\norder by\n  error_pe.letter_head, \n  main_pe.name)\nunion all\n(select distinct\n  'Sales Invoice' as `Document Type`,\n  error_pe.letter_head,\n  main_pe.name, \n  main_pe.posting_date\nfrom \n  `tabSales Invoice` main_pe,\n  (select \n    letter_head,\n    max(pe.name) as name, \n    pe.posting_date \n  from   \n    `tabSales Invoice` pe \n  where   \n    pe.name &lt; (select \n        max(name) \n       from \n         `tabSales Invoice` \n       where \n          posting_date = (pe.posting_date - interval 1 day) \n        and letter_head = pe.letter_head\n        and posting_date &lt; '2018-08-01' \n        and posting_date &gt; '2018-03-31'\n        and docstatus=1) \n    and posting_date &lt; '2018-08-01' \n    and posting_date &gt; '2018-03-31'  \n    and docstatus=1 \n  group by \n    pe.posting_date \n  order by\n    pe.posting_date) error_pe\nwhere \n  main_pe.posting_date &gt;= (error_pe.posting_date - interval 1 day) \n  and main_pe.posting_date &lt;= (error_pe.posting_date + interval 1 day)\n  and main_pe.letter_head = error_pe.letter_head\norder by\n  error_pe.letter_head, \n  main_pe.name)) data", 
  "query_name": "Posting Date Problem"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2018-05-07 13:17:34.554631", 
  "name": "Current Salaries", 
  "query": "select \n  e.branch,\n  se.employee_name, \n  se.parent,\n  se.base \nfrom \n  `tabSalary Structure Employee` se,\n  `tabEmployee` e\nwhere \n  se.from_date &lt;= '2018-04-01'\n  and (se.to_date is null or se.to_date &gt;= '2018-04-30')\n  and se.parent in (select name from `tabSalary Structure`\n        where is_active = 'Yes')\n  and e.name=se.employee\n  and e.status='Active'", 
  "query_name": "Current Salaries"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2018-05-29 13:13:23.287089", 
  "name": "Monthly Invoice Nos", 
  "query": "select\n  concat(monthname(posting_date),' ',year(posting_date)) as `Month`,\n  letter_head as `Branch`,\n  min(name) as `Starting Invoice No`,\n  max(name) as `End Invoice No`\nfrom\n  `tabSales Invoice`\nwhere\n  posting_date &gt;= '2018-01-01'\n  and posting_date &lt;= '2018-03-31'\ngroup by\n  letter_head,\n  month(posting_date)\norder by\n  letter_head,\n  month(posting_date)", 
  "query_name": "Monthly Invoice Nos"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2018-07-10 17:34:49.365002", 
  "name": "Outstanding Details for Adjustments", 
  "query": "select \n  *,\n  cast(`Total Debit`-`Total Credit` as Decimal(17,2)) as `Balance`,\n  cast((((`Total Debit`-`Total Credit`)/`Total Debit`)*100) as Decimal(8,2)) as `Percentage`,\n  cast((((`Total Debit`-`Total Credit`)/`Total Inv Value`)*100) as Decimal(8,2)) as `Inv Percentage`\nfrom\n  (select \n    dump.party,\n    customer.customer_name,\n    cast(sum(dump.debit) as Decimal(17,2)) as `Total Debit`,\n    cast(sum(dump.credit) as Decimal(17,2)) as `Total Credit`,\n    count(dump.hypothecation) as `Hypothecation`,\n    (select \n      cast(sum(grand_total) as Decimal(17,2))\n     from \n      `tabSales Invoice` \n     where \n      customer=party \n      and docstatus=1\n      and posting_date &gt;= '2018-04-01'\n      and posting_date &lt;= '2018-06-30'    \n    ) as `Total Inv Value`    \n  from\n  (select \n      gl_entry.voucher_type,\n      gl_entry.voucher_no,\n      gl_entry.posting_date,\n      gl_entry.debit,\n      gl_entry.credit,\n      gl_entry.party,\n      sales_invoice.hypothecation,\n      sales_invoice.reference\n    from   \n      `tabGL Entry` gl_entry\n      left join\n      `tabSales Invoice` sales_invoice\n      on\n      gl_entry.voucher_no = sales_invoice.name\n    where   \n      gl_entry.party_type = 'Customer'\n      and gl_entry.posting_date &gt;= '2018-04-01'\n      and gl_entry.posting_date &lt;= '2018-06-30'\n    order by \n      gl_entry.posting_date) as dump,\n    `tabCustomer` customer\n  where\n    customer.name = dump.party\n  group by \n    dump.party) as data", 
  "query_name": "Outstanding Details for Adjustments"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2021-01-12 20:46:06.743342", 
  "name": "Balances Queries", 
  "query": "//New Trial Balance Query\nselect \n u.`Root`,\n u.`Parent`,\n u.`Account`,\n u.`Party`,\n u.`Party Name`,\n cast(if(u.`Opening Balance` &lt; 0, u.`Opening Balance`, 0) as Decimal(17,2) as `Opening Credit`,\n cast(if(u.`Opening Balance` &gt; 0, u.`Opening Balance`, 0) as Decimal(17,2) as `Opening Debit`,   \n cast(if(u.`Transactions` &lt; 0, u.`Transactions`, 0) as Decimal(17,2)) as `Transaction Credit`, \n cast(if(u.`Transactions` &gt; 0, u.`Transactions`, 0) as Decimal(17,2)) as `Transaction Debit`,\n  cast(u.`Opening Balance` + u.`Transactions` as Decimal(17,2)) as `Closing Balance`\nfrom \n(select\n  acc.root_type as `Root`,\n  acc.parent_account as `Parent`,\n  acc.name as `Account`,\n  gl_entry.party as `Party`,\n  parties.`Party Name` as `Party Name`,\n  sum(if(posting_date&lt;'2019-04-01' and acc.root_type not in ('Expense', 'Income'),debit-credit,0)) as `Opening Balance`,\n  sum(if(posting_date&gt;='2019-04-01' and posting_date&lt;='2020-03-31',debit-credit,0)) as `Transactions`\nfrom\n  `tabAccount` acc,\n  (`tabGL Entry` gl_entry left join \n  ((select 'Customer' as party_type, name, customer_name as `Party Name` from `tabCustomer`)\n  union all\n  (select 'Supplier' as party_type, name, supplier_name as `Party Name` from `tabSupplier`)\n  union all\n  (select 'Employee' as party_type, name, employee_name as `Party Name` from `tabEmployee`)) as parties\n  on (parties.name = gl_entry.party and parties.party_type=gl_entry.party_type))\nwhere\n  acc.name = gl_entry.account\ngroup by\n  gl_entry.account,\n  `Party`\norder by\n  acc.root_type,\n  acc.parent_account,\n  acc.name,\n  `Party Name`) u\n\n\n// Opening Balances - Tally Closing - Draft only\nselect \n u.`Root`,\n u.`Parent`,\n u.`Account`,\n u.`Party Name`,\n sum(u.`Debit`) as `Debit`,\n sum(u.`Credit`) as `Credit`\nfrom \n((select\n  acc.root_type as `Root`,\n  acc.parent_account as `Parent`,\n  jour_details.account as `Account`,\n  jour_details.party_name as `Party Name`,\n  sum(jour_details.debit) as `Debit`,\n  sum(jour_details.credit) as `Credit`\nfrom\n  `tabJournal Entry` jour,\n  `tabJournal Entry Account` jour_details,\n  `tabAccount` acc\nwhere\n  jour.docstatus = 0\n  and jour.posting_date &lt;= '2017-06-30'\n  and jour.name = jour_details.parent\n  and acc.name = jour_details.account\ngroup by\n  jour_details.party_name,\n  jour_details.account\norder by\n  acc.root_type,\n  acc.parent_account,\n  jour_details.account)\nunion all\n(select\n  acc.root_type as `Root`,\n  acc.parent_account as `Parent`,  \n  details.account as `Account`,\n  null as `Party Name`,\n  sum(details.debit_in_account_currency) as `Debit`,\n  sum(details.credit_in_account_currency) as `Credit`\n from\n  `tabGL Entry` details,\n  `tabStock Entry` entry,\n  `tabAccount` acc\n where\n  entry.name = details.voucher_no\n  and entry.posting_date &lt;= '2017-06-30'\n  and entry.purpose like '%Material Rec%'\n  and acc.name = details.account\n  and entry.docstatus = 1\n group by\n  details.account\n)) u \ngroup by \n   u.`Party Name`,\n   u.`Account` \norder by \n   u.`Root`, \n   u.`Parent`, \n   u.`Account`\n\n//Trial Balance\nselect \n u.`Root`,\n u.`Parent`,\n u.`Account`,\n u.`Party`,\n u.`Party Name`,\n cast((case when (u.`Opening Balance` &lt; 0) then\n         abs(u.`Opening Balance`)\n      else 0 end) as Decimal(17,2)) as `Opening Credit`,\n cast((case when (u.`Opening Balance` &gt; 0) then\n         abs(u.`Opening Balance`)\n      else 0 end) as Decimal(17,2)) as `Opening Debit`,  \n cast((case when (u.`Opening Balance` + u.`Transactions` &lt; 0) then\n         abs(u.`Opening Balance` + u.`Transactions`)\n      else 0 end) as Decimal(17,2)) as `Transaction Credit`,  \n cast((case when (u.`Opening Balance` + u.`Transactions` &gt; 0) then\n         abs(u.`Opening Balance` + u.`Transactions`)\n      else 0 end) as Decimal(17,2)) as `Transaction Debit`,\n  cast(u.`Opening Balance` + u.`Transactions` as Decimal(17,2)) as `Closing Balance`\nfrom \n(select\n  acc.root_type as `Root`,\n  acc.parent_account as `Parent`,\n  acc.name as `Account`,\n  gl_entry.party as `Party`,\n  parties.`Party Name` as `Party Name`,\n  sum(if(posting_date&lt;'2018-04-01' and acc.root_type not in ('Expense', 'Income'),debit-credit,0)) as `Opening Balance`,\n  sum(if(posting_date&gt;='2018-04-01' and posting_date&lt;='2019-03-31',debit-credit,0)) as `Transactions`\nfrom\n  `tabAccount` acc,\n  (`tabGL Entry` gl_entry left join \n  ((select 'Customer' as party_type, name, customer_name as `Party Name` from `tabCustomer`)\n  union all\n  (select 'Supplier' as party_type, name, supplier_name as `Party Name` from `tabSupplier`)\n  union all\n  (select 'Employee' as party_type, name, employee_name as `Party Name` from `tabEmployee`)) as parties\n  on (parties.name = gl_entry.party and parties.party_type=gl_entry.party_type))\nwhere\n  acc.name = gl_entry.account\ngroup by\n  gl_entry.account,\n  `Party`\norder by\n  acc.root_type,\n  acc.parent_account,\n  acc.name,\n  `Party Name`) u\n  \n//Customer Current Balance\nselect\n  gl_entry.party as `Party`,\n  parties.`Party Name` as `Party Name`,\n  max(if(voucher_type = 'Sales Invoice',posting_date,NULL)) as `Latest Sales Invoice`,\n  cast(sum(if(posting_date&lt;'2017-07-01',debit-credit,0)) as Decimal(17,2)) as `Opening Balance`,\n  cast(sum(if((posting_date&gt;='2017-07-01' and posting_date&lt;='2018-03-31'),debit,0)) as Decimal(17,2)) as `Total Debit`,\n  cast(sum(if((posting_date&gt;='2017-07-01' and posting_date&lt;='2018-03-31'),credit,0)) as Decimal(17,2)) as `Total Credit`,\n  cast(sum(if(posting_date&lt;='2018-03-31',debit-credit,0)) as Decimal(17,2)) as `Closing Balance`,\n  cast(sum(if(posting_date&lt;=curdate(),debit-credit,0)) as Decimal(17,2)) as `Current Balance`\nfrom\n  (`tabGL Entry` gl_entry left join \n  ((select 'Customer' as party_type, name, customer_name as `Party Name` from `tabCustomer`)) as parties\n  on (parties.name = gl_entry.party and parties.party_type=gl_entry.party_type))\nwhere\n  gl_entry.party_type = 'Customer'\ngroup by\n  `Party`\norder by\n  `Party Name`\n\n\n  \n", 
  "query_name": "Balances Queries"
 }, 
 {
  "description": "CALCULATE PURCHASE = COGS + CLOSING STK - OPENING STK\n\nFIND THE DIFFERENCE BETWEEN ACTUAL PURCHASE AND PURCHASE CALCUATED ABOVE\n\nFIND THE DIFFERENCE BETWEEN PURCHASE AND PURCHASE WITHOUT STOCK IN HAND \n\nREDUCE EXPENSES BOOKED UNDER PURCHASE INVOICE FROM PURCHASE\n\nREDUCE STOCK ADJUSTED FROM PURCHASE\n\nMATCH THE DIFFERENCE OF TRANSACTION BETWEEN DEBIT AND CREDIT TOTALS OF STATIC STOCK ", 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2021-01-17 15:09:49.320254", 
  "name": "Quantitative Details for Balance Sheet", 
  "query": "//NEW QUERY\nSELECT \n  item.name, \n  item.item_group, \n  item.brand,\n  ( \n         SELECT Sum(stock_value_difference) \n         FROM   `tabStock Ledger Entry` \n         WHERE  posting_date &lt;'2020-04-01' AND item_code = item.name\n  ) AS `Opening Value`, \n  ( \n         SELECT DISTINCT si.income_account \n         FROM            `tabSales Invoice Item` si, \n                         `tabSales Invoice` inv \n         WHERE           inv.posting_date BETWEEN '2020-04-01' AND '2021-03-31' \n         AND             item.name = si.item_code \n         AND             inv.docstatus=1 \n         AND             si.parent=inv.name\n  ) AS `Sales Income Account`, \n  ( \n         SELECT sum(net_amount) \n         FROM   `tabSales Invoice Item` si, \n                `tabSales Invoice` inv \n         WHERE  inv.posting_date BETWEEN '2020-04-01' AND '2021-03-31' \n         AND    item.name = si.item_code \n         AND    inv.docstatus=1 \n         AND    si.parent=inv.name\n  ) AS `Sales Value`, \n  ( \n         SELECT sum(net_amount) \n         FROM   `tabPurchase Invoice Item` si, \n                `tabPurchase Invoice` inv \n         WHERE  inv.posting_date BETWEEN '2020-04-01' AND '2021-03-31' \n         AND    item.name = si.item_code \n         AND    inv.docstatus=1 \n         AND    si.parent=inv.name\n  ) AS `Purchase Value`, \n  ( \n         SELECT DISTINCT si.expense_account \n         FROM            `tabPurchase Invoice Item` si, \n                         `tabPurchase Invoice` inv \n         WHERE           inv.posting_date BETWEEN '2020-04-01' AND '2021-03-31' \n         AND             item.name = si.item_code \n         AND             inv.docstatus=1 \n         AND             si.parent=inv.name\n  ) AS `Purchase Expense Account`, \n  (\n         SELECT sum(stock_value_difference) \n         FROM   `tabStock Ledger Entry`\n         WHERE  item_code = item.item_code\n         AND    posting_date BETWEEN '2020-04-01' AND '2021-03-31'\n         AND    voucher_type = 'Sales Invoice'  \n  ) AS `Cost of Goods Sold`,\n  ( \n         SELECT sum(stock_value_difference) \n         FROM   `tabStock Ledger Entry` \n         WHERE  posting_date &lt;= '2021-03-31' AND item_code = item.name\n  ) AS `Closing Value` \nFROM \n  `tabItem` item \nGROUP BY \n  item.name\nORDER BY\n  item.name\n\n\n///OLD QUERY\nselect\n  item.brand,\n  item.item_group,\n  sum(if(stock.posting_date &lt; '2018-04-01', stock.actual_qty, 0)) as `Opening`,\n  sum(if(stock.posting_date &lt; '2018-04-01', stock.stock_value_difference, 0)) as `Opening Value`,  \n  abs(sum(if((stock.posting_date&gt;='2018-04-01' and stock.voucher_type = 'Purchase Invoice'), stock.actual_qty, 0))) as `Purchase Qty`,\n  abs(sum(if((stock.posting_date&gt;='2018-04-01' and stock.voucher_type = 'Purchase Invoice'), stock.stock_value_difference, 0))) as `Purchase Value`,\n  abs(sum(if((stock.posting_date&gt;='2018-04-01' and stock.voucher_type = 'Sales Invoice'), stock.actual_qty, 0))) as `Sales Qty`,\n  abs(sum(if((stock.posting_date&gt;='2018-04-01' and stock.voucher_type = 'Sales Invoice'), si_item.net_amount, 0))) as `Sales Value`,  \n  sum(stock.actual_qty) as `Balance Qty`,\n  sum(stock.stock_value_difference) as `Balance Value`\nfrom \n    (`tabStock Ledger Entry` stock \n    left join `tabStock Entry` entry on (entry.name = stock.voucher_no)\n    left join `tabSales Invoice Item` si_item on \n           (si_item.parent = stock.voucher_no and si_item.item_code = stock.item_code and si_item.docstatus = 1)),\n    `tabItem` item\nwhere\n    (entry.purpose = 'Material Receipt' or entry.purpose is null)   \n    and stock.voucher_type != 'Delivery Note'\n    and stock.posting_date &gt;= '2017-04-01'\n    and stock.posting_date &lt;= '2019-03-31'\n    and stock.item_code = item.item_code\ngroup by\n  item.brand, item.item_group\norder by\n  item.brand, item.item_group", 
  "query_name": "Quantitative Details for Balance Sheet"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2018-11-01 13:25:27.053960", 
  "name": "Free Serial Nos", 
  "query": "select serial.name, serial.item_code, serial.warehouse from `tabSerial No` serial, `tabPurchase Invoice` inv where inv.name = serial.purchase_document_no and inv.supplier_name like 'Samsung%' and inv.docstatus = 1 and serial.item_code like '%-J600%'", 
  "query_name": "Free Serial Nos"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2019-10-20 18:18:45.018380", 
  "name": "GST Debit/Credit Notes", 
  "query": "select \n  data.name as `Voucher No`,\n  data.posting_date as `Date`,\n  ifnull(max(data.party_name), max(if(data.account regexp ('SGST|CGST|Supplier|Incentive|Service|IGST'),null,data.account))) as `Party`,\n  if(min(data.`Note Type`)=1, 'Supplier Credit Note', 'Supplier Debit Note') as `Note Type`,\n  sum(if(data.account not regexp ('SGST|CGST|Supplier|Incentive|Service|IGST'),if(credit&gt;0,credit,debit),0)) as `Total Value`,\n  sum(if(data.account like 'SGST%',if(credit&gt;0,credit,debit),0)) as `SGST`,\n  sum(if(data.account like 'CGST%',if(credit&gt;0,credit,debit),0)) as `CGST`,  \n  sum(if(data.account like 'IGST%',if(credit&gt;0,credit,debit),0)) as `IGST`,    \n  sum(if(data.account regexp ('Supplier|Incentive|Service'),if(credit&gt;0,credit,debit),0)) as `Taxable Value`,\n  data.remark as `Remarks`\nfrom\n  (\n   select \n     JE.posting_date,\n     if((JEA.account not regexp ('SGST|CGST|Supplier|Incentive|Service|IGST') and JEA.credit&gt;0), 0, 1) as `Note Type`,\n     JE.name,\n     JEA.account,\n     JEA.party_name,\n     JEA.debit,\n     JEA.credit,\n     JE.remark\n   from\n     `tabJournal Entry` JE,\n     `tabJournal Entry Account` JEA\n   where\n     JE.name = JEA.parent\n     and JE.docstatus = 1\n     and JE.name in (\n      select \n        J1.parent\n      from\n        `tabJournal Entry Account` J1\n        inner join\n        `tabJournal Entry Account` J2\n        on J1.parent = J2.parent\n      where\n        J1.account regexp ('SGST|IGST')\n        and J2.account regexp ('Supplier|Incentive|Service')\n      order by\n        J1.parent\n      )\n    ) data\ngroup by\n  data.name\norder by\n  data.posting_date", 
  "query_name": "GST Debit/Credit Notes"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2019-04-09 20:09:45.636737", 
  "name": "Serial Nos - Wrong Purchase", 
  "query": "select \n  name \nfrom \n  `tabSerial No` serial\nwhere \n  serial.name regexp \n  (select \n    replace(group_concat(serial_no separator '|'), '\\n', '|') \n   from \n    `tabPurchase Invoice Item` \n   where \n    parent = 'MAPL/PINV/VN/18-19/002004' \n   group by \n    parent)\n  and (select \n    count(*) \n    from \n    `tabStock Ledger Entry` \n    where \n    serial_no regexp serial.name) &lt;= 0", 
  "query_name": "Serial Nos - Wrong Purchase"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2019-05-23 19:15:34.381686", 
  "name": "Parent Child Query", 
  "query": "select \n  ig1.name,\n  ig1.parent_customer_group,\n  ig1.lft, ig1.rgt\nfrom \n  `tabCustomer Group` ig1,\n  (select name, parent_customer_group,lft, rgt from `tabCustomer Group` where name like '%All C%') ig2\nwhere\n  ig2.lft &lt;= ig1.lft \n  and ig2.rgt &gt;= ig1.rgt\n", 
  "query_name": "Parent Child Query"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2020-10-16 14:05:46.693549", 
  "name": "Outstanding Accounts", 
  "query": "select \n  dump.`Customer`,\n  dump.`Customer Name`,\n  dump.`Customer Group`,\n  dump.`Balance`,\n  case \n      when dump.`Is Finance` = -1 then 'Old Outstanding'\n      when dump.`Is Finance` = 1 then 'Finance'\n      when dump.`Is Finance` is NULL then NULL\n      else 'Reference Sale'\n  end as `Remarks`,\n  dump.`Contact No 1`,\n  dump.`Contact No 2`\nfrom\n((select \n  #0 as `Row Number`,\n  'Report AS ON' as `Customer`,\n  cast(now() as Date) as `Customer Name`,\n  NULL as `Customer Group`,\n  NULL as `Contact No 1`,\n  NULL as `Contact No 2`,  \n  NULL as `Balance`,  \n  NULL as `Is Finance`\n)\nunion all\n(select \n  #@row_number:=ifnull(@row_number,0) + 1 as `Row Number`,\n  data.`Customer`,\n  data.`Customer Name`,\n  data.`Customer Group`,\n  data.`Contact No 1`,\n  data.`Contact No 2`,\n  data.`Balance`,\n  ifnull(sum(sales.is_finance), -1) as `Is Finance`\nfrom \n  (select \n    customer.name as `Customer`,\n    customer.customer_name as `Customer Name`,\n    customer.customer_group as `Customer Group`,\n    customer.primary_contact_no as `Contact No 1`, \n    customer.secondary_contact_no as `Contact No 2`,    \n    sum(if(gl_entry.posting_date&lt;='2019-07-31',gl_entry.debit,0)-gl_entry.credit) as `Balance`\n  from\n    `tabGL Entry` gl_entry,\n    `tabCustomer` customer\n  where  \n    gl_entry.party_type = 'Customer'\n    and gl_entry.party = customer.name\n  group by\n    customer.name) as data left join \n  `tabSales Invoice` sales on (sales.customer = data.`Customer` and sales.docstatus = 1)\nwhere\n  data.`Balance` &gt; 1000 \ngroup by\n  data.`Customer`)) dump\norder by\n  dump.`Balance` is NULL desc,\n  dump.`Balance` desc ", 
  "query_name": "Outstanding Accounts"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2019-09-17 13:18:16.518009", 
  "name": "Sales Purchase Report", 
  "query": "select  \n  *\nfrom \n(select  \n  DATE_FORMAT(sales.posting_date,'%b %Y') as `Month`,\n  sum(sales.net_total) as `Sales Net Total`,\n  sum(sales.total) as `Sales Total`\nfrom\n  `tabSales Invoice` sales\nwhere\n  sales.posting_date between '2018-04-01' and '2019-03-31'\n  and sales.docstatus = 1\ngroup by\n  month(sales.posting_date)\n) sales_values,\n(select\n  DATE_FORMAT(purchase.posting_date,'%b %Y') as `Month`,\n  sum(purchase.net_total) as `Purchase Net Total`,\n  sum(purchase.grand_total) as `Purchase Total`\nfrom\n  `tabPurchase Invoice` purchase\nwhere\n  purchase.name in (select voucher_no from `tabGL Entry` where account like 'Stock in H%' and voucher_type = 'Purchase Invoice')\n  and purchase.posting_date between '2018-04-01' and '2019-03-31'\n  and purchase.docstatus = 1\ngroup by\n  month(purchase.posting_date)\n) purchase_values\nwhere\n  sales_values.`Month` = purchase_values.`Month`\norder by\n  sales_values.`Month`\n  ", 
  "query_name": "Sales Purchase Report"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2019-10-22 21:32:03.398537", 
  "name": "Discrepancy in AR Summary Vs Trial Balance Debtors", 
  "query": "eg. query\n\nselect\n  party,sum(debit-credit)\nfrom \n  `tabGL Entry`\nwhere\nposting_date &lt;= '2019-03-31' and\nparty in ('CUST-00047','CUST-00108','CUST-00142','CUST-00210','CUST-00219','CUST-00222','CUST-00318','CUST-00324','CUST-00553','CUST-00660','CUST-00686','CUST-00734','CUST-00762','CUST-00768','CUST-00798','CUST-01094','CUST-01174','CUST-01342')\ngroup by party\n\nVlookup results of above query with results of AR Report (Non Zero Accounts only)\n\nJournal Entries Done in order to set off Loan Against Sales Invoice for Employees the System is Not Calculating the correct figures in AR Summary Report. \n", 
  "query_name": "Discrepancy in AR Summary Vs Trial Balance Debtors"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2019-11-02 16:44:23.127062", 
  "name": "Finance Name Check", 
  "query": "select \n  idx, \n  finance_customer_name, \n  internal_customer_name \nfrom \n  `tabFinance Payment Details` \nwhere \n  (soundex(internal_customer_name)&lt;&gt;soundex(finance_customer_name) \n    or internal_customer is null) \n  and parent = 'BAFL RF Oct 19' \norder by idx", 
  "query_name": "Finance Name Check"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2020-02-07 18:14:06.013326", 
  "name": "Supplier Wise Stock Balance", 
  "query": "select\n  inv.supplier_name as `Supplier Name`,\n  item.item_code as `Item`,\n  (select sum(actual_qty) from `tabStock Ledger Entry` where item_code = item.item_code) as `Balance Qty`\nfrom\n  `tabPurchase Invoice` inv,\n  `tabPurchase Invoice Item` item\nwhere\n  item.parent = inv.name\n  and inv.docstatus = 1\n  and inv.supplier_name regexp ('Kakat|Quality')\ngroup by\n  item.item_code\norder by\n  inv.supplier_name,\n  item.item_code", 
  "query_name": "Supplier Wise Stock Balance"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2020-02-23 13:21:41.670979", 
  "name": "Unique Customer Records", 
  "query": "1)\nalter table tempcustomer add column unique_idx int default 0\n1.1)\nselect customer_name, name, trim(customer_name) as `Edited Name`, trim(both ',' from replace(replace(replace(trim(primary_contact_no),'-',''),'/',','),' ','')) as `Edited Primary`, primary_contact_no, trim(both ',' from replace(replace(replace(trim(secondary_contact_no),'-',''),'/',','),' ','')) as `Edited Secondary`, secondary_contact_no from tempcustomer\n1.2)\nupdate tempcustomer set customer_name = trim(customer_name), primary_contact_no = trim(both ',' from replace(replace(replace(trim(primary_contact_no),'-',''),'/',','),' ','')), secondary_contact_no = trim(both ',' from replace(replace(replace(trim(secondary_contact_no),'-',''),'/',','),' ',''))\n\n2)\nselect *, \n  @current_customer,\n  if(trim(@current_customer) = trim(dump.customer_name),@rank:=@rank+1,@rank:=0) as `Rank`,\n  @current_customer:=dump.customer_name as `Current Customer Name`\n  from (\nselect \n  master.creation, \n  master.name, \n  master.customer_name,\n  master.primary_contact_no,\n  master.secondary_contact_no, \n  master.disabled\nfrom tempcustomer master, \n  (SELECT \n    name,\n    customer_name, \n    primary_contact_no, \n    secondary_contact_no \n   FROM tempcustomer\n   GROUP BY concat(trim(customer_name), trim(both ',' from replace(replace(replace(trim(primary_contact_no),'-',''),'/',''),' ','')))\n   HAVING COUNT(concat(trim(customer_name), trim(both ',' from replace(replace(replace(trim(primary_contact_no),'-',''),'/',''),' ','')))) &gt; 1) data,\n  (select @rank:=0, @current_customer:='') m\nwhere \n  trim(data.customer_name) = trim(master.customer_name)\n  and (trim(both ',' from replace(replace(replace(trim(data.primary_contact_no),'-',''),'/',','),' ',''))=trim(both ',' from replace(replace(replace(trim(master.primary_contact_no),'-',''),'/',','),' ',''))\n  or trim(both ',' from replace(replace(replace(trim(data.primary_contact_no),'-',''),'/',','),' ',''))=trim(both ',' from replace(replace(replace(trim(COALESCE(master.secondary_contact_no,'')),'-',''),'/',','),' ','')))\norder by master.customer_name) dump\n  \n3)\nupdate tempcustomer, \n(select *, \n  @current_customer,\n  if(trim(@current_customer) = trim(dump.customer_name),@rank:=@rank+1,@rank:=0) as `Rank`,\n  @current_customer:=dump.customer_name as `Current Customer Name`\n  from (\nselect \n  master.creation, \n  master.name, \n  master.customer_name,\n  master.primary_contact_no,\n  master.secondary_contact_no, \n  master.disabled\nfrom tempcustomer master, \n  (SELECT \n    name,\n    customer_name, \n    primary_contact_no, \n    secondary_contact_no \n   FROM tempcustomer\n   GROUP BY concat(trim(customer_name), trim(both ',' from replace(replace(replace(trim(primary_contact_no),'-',''),'/',''),' ','')))\n   HAVING COUNT(concat(trim(customer_name), trim(both ',' from replace(replace(replace(trim(primary_contact_no),'-',''),'/',''),' ','')))) &gt; 1) data,\n  (select @rank:=0, @current_customer:='') m\nwhere \n  trim(data.customer_name) = trim(master.customer_name)\n  and (trim(both ',' from replace(replace(replace(trim(data.primary_contact_no),'-',''),'/',','),' ',''))=trim(both ',' from replace(replace(replace(trim(master.primary_contact_no),'-',''),'/',','),' ',''))\n  or trim(both ',' from replace(replace(replace(trim(data.primary_contact_no),'-',''),'/',','),' ',''))=trim(both ',' from replace(replace(replace(trim(COALESCE(master.secondary_contact_no,'')),'-',''),'/',','),' ','')))\norder by master.customer_name) dump) duplicates \nset tempcustomer.unique_idx = duplicates.`Rank` where tempcustomer.name = duplicates.name\n\n4)\nselect concat(trim(customer_name), replace(replace(replace(trim(primary_contact_no),'-',''),'/',''),' ',''), replace(replace(replace(trim(secondary_contact_no),'-',''),'/',''),' ','')), customer_name, unique_idx from tempcustomer where customer_name = 'JASVEER SINGH TYAGI'\n\n5)\nalter table tempcustomer \n  add constraint unique_customers unique (\n    customer_name,\n    primary_contact_no,\n    unique_idx\n    )", 
  "query_name": "Unique Customer Records"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2020-09-24 17:13:15.638709", 
  "name": "Panasonic Sales Report", 
  "query": "select\n  details.item_code,\n  details.item_group,\n  details.serial_no,\n  sales.customer_name,\n  sales.posting_date,\n  sales.address_display,\n  cust.primary_contact_no,\n  cust.secondary_contact_no,  \n  details.rate\nfrom\n  `tabSales Invoice` sales,\n  `tabSales Invoice Item` details,\n  `tabCustomer` cust\n where\n  sales.docstatus=1\n  and cust.name=sales.customer\n  and sales.posting_date between '2020-07-01' and '2020-07-31'\n  and details.brand='Panasonic'\n  and details.parent=sales.name\ngroup by\n  details.parent,\n  details.item_code\norder by\n  sales.posting_date,\n  sales.name,\n  details.item_code\n\n//Opening Serial Nos\nselect\n  item_code,\n  name\nfrom\n  `tabSerial No`\nwhere\n  brand = 'Panasonic'\n  and (delivery_date &gt;= '2020-07-01' or delivery_date is null)\norder by\n  item_code\n\n//Closing Stock\nselect\n  item.item_code,\n  sum(sle.actual_qty)\nfrom\n  `tabStock Ledger Entry` sle,\n  `tabItem` item\nwhere\n  item.name = sle.item_code\n  and item.brand = 'Panasonic'\n  and sle.posting_date &lt; '2020-07-01'\ngroup by\n  item.item_code\norder by\n  item.item_code\n\n\n//purchase\nselect\n  details.item_code,\n  details.item_group,\n  details.qty,\n  details.serial_no,\n  sales.posting_date,\n  details.rate,\n  details.amount\nfrom\n  `tabPurchase Invoice` sales,\n  `tabPurchase Invoice Item` details\n where\n  sales.docstatus=1\n  and sales.posting_date between '2020-07-01' and '2020-07-31'\n  and details.brand='Panasonic'\n  and details.parent=sales.name\norder by\n  sales.posting_date,\n  sales.name,\n  details.item_code\n", 
  "query_name": "Panasonic Sales Report"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2020-09-17 13:35:50.693010", 
  "name": "Jawa Customer Balance", 
  "query": "select invoice.posting_date, invoice.customer, invoice.customer_name, invoice.hypothecation, sum(gl_entry.debit)-sum(gl_entry.credit) as balance, invoice.grand_total, if(invoice.docstatus=0,'Draft', 'Submitted') from `tabGL Entry` gl_entry, `tabSales Invoice` invoice, `tabSales Invoice Item` item where invoice.customer=gl_entry.party and item.parent = invoice.name and item.brand like '%Jawa%' and item.item_group like '%Two%' and invoice.posting_date &gt;= '2020-06-01' and invoice.docstatus &lt; 2 group by invoice.customer order by posting_date", 
  "query_name": "Jawa Customer Balance"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2021-07-10 19:44:58.334806", 
  "name": "Instant Cashback Details", 
  "query": "select\n  pe.reporting_name,\n  pe.posting_date,\n  pe.party,\n  pe.party_name,\n  pe.base_amount,\n  pe.paid_amount,\n  pe.mode_of_payment,\n  pe.special_payment,\n  (select group_concat(distinct item.brand) \n    from `tabSales Invoice Item` item join `tabSales Invoice` inv on inv.name = item.parent\n    where\n       inv.docstatus &lt; 2\n       and inv.posting_date between (pe.posting_date - interval 5 day) and (pe.posting_date + interval 5 day)\n       and inv.customer = pe.party\n   ) as brands\nfrom\n  `tabPayment Entry` pe\nwhere\n  pe.docstatus = 1\n  and pe.posting_date between '2021-06-01' and '2021-06-30'\n  and pe.special_payment is not null", 
  "query_name": "Instant Cashback Details"
 }, 
 {
  "description": null, 
  "docstatus": 0, 
  "doctype": "Custom SQL Queries", 
  "modified": "2021-08-08 15:06:19.886653", 
  "name": "Yearly Salary Details", 
  "query": "select\n  slip.employee_name,\n  sum(if(detail.salary_component='Arrear',detail.amount,0)) as `Arrear`,\n  sum(if(detail.salary_component='Basic',detail.amount,0)) as `Basic`,  \n  sum(if(detail.salary_component='Children Education Allowance',detail.amount,0)) as `Children Education Allowance`,  \n  sum(if(detail.salary_component='Conveyance',detail.amount,0)) as `Conveyance`,\n  sum(if(detail.salary_component='ESI Contr.',detail.amount,0)) as `ESI Contr.`,  \n  sum(if(detail.salary_component='House Rent Allowance',detail.amount,0)) as `House Rent Allowance`,  \n  sum(if(detail.salary_component='Income Tax',detail.amount,0)) as `Income Tax`,  \n  sum(if(detail.salary_component='Leave Encashment',detail.amount,0)) as `Leave Encashment`,  \n  sum(if(detail.salary_component='Medical Allowance',detail.amount,0)) as `Medical Allowance`,  \n  sum(if(detail.salary_component='P.F. Contr.',detail.amount,0)) as `P.F. Contr.`  \nfrom\n  `tabSalary Slip` slip,\n  `tabSalary Detail` detail\nwhere\n  detail.parent = slip.name\n  and slip.start_date &gt;= '2019-04-01'\n  and slip.end_date &lt;= '2020-03-31'\n  and slip.employee = 'EMP/0021'\n  and slip.docstatus = 1\ngroup by\n  slip.employee", 
  "query_name": "Yearly Salary Details"
 }
]